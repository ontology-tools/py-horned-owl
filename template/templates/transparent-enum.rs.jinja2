#[derive(Debug, FromPyObject, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum {{ model.name }} {
    {% for v_name, type in model.variants.items() %}
        #[pyo3(transparent)]
        {{ v_name }} ({{ type | as_rust_type }}),
    {% endfor %}
}

impl<'py> IntoPyObject<'py> for {{ model.name }} {
    type Target = PyAny;
    type Output = Bound<'py, Self::Target>;
    type Error = PyErr;

    fn into_pyobject(self, py: Python<'py>) -> Result<Self::Output, Self::Error> {
        match self {
        {% for v_name in model.variants %}
            {{ model.name }}::{{ v_name }}(inner) => inner.into_pyobject(py).map(Bound::into_any).map_err(PyErr::from),
        {% endfor %}
        }
    }
}

impl From<&{{ model.name }}> for horned_owl::model::{{ model.name }}<ArcStr> {
    fn from(value: &{{ model.name }}) -> Self {
        match value {
        {% for v_name in model.variants %}
            {{ model.name }}::{{ v_name }}(inner) => horned_owl::model::{{ model.name }}::{{ v_name }}(inner.into()),
        {% endfor %}
        }
    }
}

impl From<&horned_owl::model::{{ model.name }}<ArcStr>> for {{ model.name }} {

    fn from(value: &horned_owl::model::{{ model.name }}<ArcStr>) -> Self {
        match value {
        {% for v_name in model.variants %}
            horned_owl::model::{{ model.name }}::{{ v_name }}(inner) => {{ model.name }}::{{ v_name }}(inner.into()),
        {% endfor %}
        }
    }
}


impl {{ model.name }} {
    pub fn py_def() -> String {
        "typing.Union[
        {%- for type in model.variants.values() -%}
            {{ type | as_py_type("m") }},
        {%- endfor -%}]".into()
    }
}

{% include "base.rs.jinja2" %}